{"version":3,"sources":["components/ColoredUserpic.js","components/avatar.png","components/App.js","reportWebVitals.js","index.js"],"names":["ColoredUserpic","props","React","useState","isHover","setIsHover","width","size","height","borderWidth","colorWidth","borderStyle","borderImage","borderRadius","boxSizing","padding","margin","background","backgroundColor","colors","styleContainer","setStyleContainer","handleHover","useEffect","styleContainerCopy","JSON","parse","stringify","hoverColors","className","style","alt","src","maxWidth","maxHeight","onMouseOver","onMouseOut","App","avatar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKA2CeA,MAxCf,SAAwBC,GAEpB,MAAgCC,IAAMC,UAAS,GAA/C,mBAAQC,EAAR,KAAiBC,EAAjB,KACA,EAA8CH,IAAMC,SAAS,CACzDG,MAAM,GAAD,OAAKL,EAAMM,KAAX,MACLC,OAAO,GAAD,OAAKP,EAAMM,KAAX,MACNE,YAAY,GAAD,OAAKR,EAAMS,WAAX,MACXC,YAAa,QACbC,YAAa,0DACbC,aAAc,MACdC,UAAW,aACXC,QAAQ,GAAD,OAAKd,EAAMe,OAAX,MACPC,WAAW,mBAAD,OAAqBhB,EAAMiB,gBAA3B,YAA8CjB,EAAMiB,gBAApD,yEAC8BjB,EAAMkB,OAAO,GAD3C,cACmDlB,EAAMkB,OAAO,GADhE,OATd,mBAAQC,EAAR,KAAwBC,EAAxB,KAmBA,SAASC,IACLjB,GAAYD,GAGhB,OAVAF,IAAMqB,WAAU,WACZ,IAAMC,EAAqBC,KAAKC,MAAMD,KAAKE,UAAUP,IACrDI,EAAmBP,WAAab,EAAO,0BAAsBH,EAAMiB,gBAA5B,YAA+CjB,EAAMiB,gBAArD,oDAAgHjB,EAAM2B,YAAY,GAAlI,cAA0I3B,EAAM2B,YAAY,GAA5J,+BAAuL3B,EAAMiB,gBAA7L,YAAgNjB,EAAMiB,gBAAtN,oDAAiRjB,EAAMkB,OAAO,GAA9R,cAAsSlB,EAAMkB,OAAO,GAAnT,KACvCE,EAAkBG,KACnB,CAAEpB,IAOD,qBAAKyB,UAAU,mBAAmBC,MAAQV,EAA1C,SACI,qBAAKS,UAAU,QACfE,IAAM,SACNC,IAAM/B,EAAM+B,IACZF,MAAO,CAACG,SAAU,OACdC,UAAW,OACXrB,aAAc,OAClBsB,YAAcb,EACdc,WAAad,OCtCV,MAA0B,mCCqB1Be,MAff,WAEE,OACE,cAAC,EAAD,CACEL,IAAMM,EACN/B,KAAM,IACNS,OAAQ,EACRE,gBAAgB,MAChBC,OAAQ,CAAC,QAAS,QAClBS,YAAa,CAAC,OAAQ,SACtBlB,WAAY,KCJH6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b0e12dc7.chunk.js","sourcesContent":["import React from 'react';\nimport '../index.css';\n\nfunction ColoredUserpic(props) {\n\n    const [ isHover, setIsHover ] = React.useState(false);\n    const [ styleContainer, setStyleContainer ] = React.useState({\n        width: `${props.size}px`,\n        height: `${props.size}px`,\n        borderWidth: `${props.colorWidth}px`,\n        borderStyle: 'solid',\n        borderImage: 'linear-gradient(to right, red, rgba(0, 0, 0, 0)) 1 100%', \n        borderRadius: '50%',\n        boxSizing: 'border-box',\n        padding: `${props.margin}px`,\n        background: `linear-gradient(${props.backgroundColor},${props.backgroundColor}) padding-box,\n                    linear-gradient(to right, ${props.colors[0]} , ${props.colors[1]})`,\n    });\n\n    React.useEffect(()=>{\n        const styleContainerCopy = JSON.parse(JSON.stringify(styleContainer));\n        styleContainerCopy.background = isHover ? `linear-gradient(${props.backgroundColor},${props.backgroundColor}) padding-box, linear-gradient(to right, ${props.hoverColors[0]} , ${props.hoverColors[1]})` : `linear-gradient(${props.backgroundColor},${props.backgroundColor}) padding-box, linear-gradient(to right, ${props.colors[0]} , ${props.colors[1]})`;\n        setStyleContainer(styleContainerCopy);\n    }, [ isHover ]);\n\n    function handleHover(){\n        setIsHover(!isHover);\n    }\n\n    return (\n        <div className=\"image__container\" style={ styleContainer }>\n            <img className=\"image\" \n            alt={ 'avatar' } \n            src={ props.src } \n            style={{maxWidth: '100%',\n                maxHeight: '100%',\n                borderRadius: '50%'}}\n            onMouseOver={ handleHover }\n            onMouseOut={ handleHover }/>\n        </div>\n    )\n}\n\nexport default ColoredUserpic;","export default __webpack_public_path__ + \"static/media/avatar.9953d57d.png\";","import React from 'react';\nimport '../index.css';\nimport ColoredUserpic from './ColoredUserpic';\n\nimport avatar from './avatar.png';\n\nfunction App() {\n\n  return (\n    <ColoredUserpic \n      src={ avatar }\n      size={150}\n      margin={4}\n      backgroundColor='red'\n      colors={['green', 'blue']}\n      hoverColors={['blue', 'green']}\n      colorWidth={6}\n    />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}